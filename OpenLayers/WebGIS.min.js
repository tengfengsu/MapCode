var GisObj = function (c) {
    this.userid = null; this.htObject = new Hashtable(); this.htObjClickMenu = new Hashtable(); this.clusters; this.clusterspoint = []; this.points = []; this.markersLayer; this.switcherLayer; this.selectFeatureControl; this._map = null; this._divName = c; this._divID = null; this._measureControls = null; this._htfeatures = new Hashtable(); this._zoom = 8; this._styleMap = null; this._strategy; this._distance = 16; this._threshold = 2; this._url = "http://p0.map.soso.com/"; this._sosoUrl = ["http://p0.map.soso.com/", "http://p1.map.soso.com/", "http://p2.map.soso.com/", "http://p3.map.soso.com/"]; this._sosomapTiles = ["http://p0.map.soso.com/maptilesv3/", "http://p1.map.soso.com/maptilesv3/", "http://p2.map.soso.com/maptilesv3/", "http://p3.map.soso.com/maptilesv3/"]; this._sososateTiles = ["http://p0.map.soso.com/sateTiles/", "http://p1.map.soso.com/sateTiles/", "http://p2.map.soso.com/sateTiles/", "http://p3.map.soso.com/sateTiles/"]; this._sososateTranTiles = ["http://p0.map.soso.com/sateTranTiles/", "http://p1.map.soso.com/sateTranTiles/", "http://p2.map.soso.com/sateTranTiles/", "http://p3.map.soso.com/sateTranTiles/"];
    this._qqmapTiles = ["http://rt0.map.gtimg.com/tile?styleid=0", "http://rt1.map.gtimg.com/tile?styleid=0", "http://rt2.map.gtimg.com/tile?styleid=0", "http://rt3.map.gtimg.com/tile?styleid=0"]; this._qqsateTiles = ["http://p0.map.gtimg.com/sateTiles/", "http://p1.map.gtimg.com/sateTiles/", "http://p2.map.gtimg.com/sateTiles/", "http://p3.map.gtimg.com/sateTiles/"]; this._qqdemTiles = ["http://p0.map.gtimg.com/demTiles/", "http://p1.map.gtimg.com/demTiles/", "http://p2.map.gtimg.com/demTiles/", "http://p3.map.gtimg.com/demTiles/"]; this._qqsateTranTiles = ["http://rt0.map.gtimg.com/tile?styleid=2", "http://rt1.map.gtimg.com/tile?styleid=2", "http://rt2.map.gtimg.com/tile?styleid=2", "http://rt3.map.gtimg.com/tile?styleid=2"]; this._bdmapTiles = ["http://online0.map.bdimg.com/onlinelabel/?qt=tile&styles=pl", "http://online1.map.bdimg.com/onlinelabel/?qt=tile&styles=pl", "http://online2.map.bdimg.com/onlinelabel/?qt=tile&styles=pl", "http://online3.map.bdimg.com/onlinelabel/?qt=tile&styles=pl", "http://online4.map.bdimg.com/onlinelabel/?qt=tile&styles=pl"];
    this._bdsateTiles = ["http://shangetu0.map.bdimg.com/it/u=", "http://shangetu1.map.bdimg.com/it/u=", "http://shangetu2.map.bdimg.com/it/u=", "http://shangetu3.map.bdimg.com/it/u=", "http://shangetu4.map.bdimg.com/it/u="]; this._bdsateTranTiles = ["http://online0.map.bdimg.com/onlinelabel/?qt=tile&styles=sl", "http://online1.map.bdimg.com/onlinelabel/?qt=tile&styles=sl", "http://online2.map.bdimg.com/onlinelabel/?qt=tile&styles=sl", "http://online3.map.bdimg.com/onlinelabel/?qt=tile&styles=sl", "http://online4.map.bdimg.com/onlinelabel/?qt=tile&styles=sl"]; this._gdmapTiles = ["https://webrd01.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8", "https://webrd02.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8", "https://webrd03.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8", "https://webrd04.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8"]; this._gdsateTiles = ["https://webst01.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=6", "https://webst02.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=6", "https://webst03.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=6", "https://webst04.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=6"];
    this._gdsateTranTiles = ["https://webst01.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8", "https://webst02.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8", "https://webst03.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8", "https://webst04.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8"]; this._numZoomLevels = 19; this._mapSource = 0; this._maptilesvLayer; this._sateTranTilesLayer; this._sateTilesLayer; this._GPS = GPS; this.Load = function (f, h, e, d, g) { if (e && e.trim().length > 0) { switch (this._mapSource) { case 1: this._qqmapTiles = this._qqsateTiles = this._qqsateTranTiles = this._qqdemTiles = e; break; case 2: this._bdmapTiles = this._bdsateTiles = this._bdsateTranTiles = e; break; case 3: this._gdmapTiles = this._gdsateTiles = this._gdsateTranTiles = e; break; default: this._sosomapTiles = this._sososateTiles = this._sososateTranTiles = e; break } } this._url = [(!e ? "" : e)]; a(f, (h == null ? this._zoom : h), this._url, d, g) }; this.SetCenter = function (f, e, d) {
        if (!d) { d = _map.getZoom() } _map.setCenter(this.GetDisplayLonlat(f, e), d)
    }; this.AddLayer = function (e, f) {
        var g = "layer_" + GetRandomNum(); var d = new OpenLayers.Layer.Vector(g, { styleMap: new OpenLayers.StyleMap({ "default": { fillColor: "#ee9900", fillOpacity: 0.6, hoverFillColor: "white", hoverFillOpacity: 0.8, strokeColor: "#ee9900", strokeOpacity: 1, strokeWidth: 1, strokeLinecap: "round", strokeDashstyle: "solid", hoverStrokeColor: "red", hoverStrokeOpacity: 1, hoverStrokeWidth: 0.2, pointRadius: 3, hoverPointRadius: 1, hoverPointUnit: "%", pointerEvents: "visiblePainted", cursor: "inherit", fontColor: "#000000", labelAlign: "cm", labelOutlineColor: "white", labelOutlineWidth: 3 }, "select": { fillColor: "blue", fillOpacity: 0.6, hoverFillColor: "white", hoverFillOpacity: 0.8, strokeColor: "blue", strokeOpacity: 1, strokeWidth: 2, strokeLinecap: "round", strokeDashstyle: "solid", hoverStrokeColor: "red", hoverStrokeOpacity: 1, hoverStrokeWidth: 0.2, pointRadius: 3, hoverPointRadius: 1, hoverPointUnit: "%", pointerEvents: "visiblePainted", cursor: "pointer", fontColor: "#000000", labelAlign: "cm", labelOutlineColor: "white", labelOutlineWidth: 3 }, "temporary": { fillColor: "#66cccc", fillOpacity: 0.4, hoverFillColor: "white", hoverFillOpacity: 0.8, strokeColor: "#66cccc", strokeOpacity: 1, strokeLinecap: "round", strokeWidth: 2, strokeDashstyle: "solid", hoverStrokeColor: "red", hoverStrokeOpacity: 1, hoverStrokeWidth: 0.2, pointRadius: 3, hoverPointRadius: 1, hoverPointUnit: "%", pointerEvents: "visiblePainted", cursor: "inherit", fontColor: "#000000", labelAlign: "cm", labelOutlineColor: "white", labelOutlineWidth: 3 }, "delete": { display: "none" } }) });
        if (f.isSupportSelect) { selectFeatureControl.setLayer(d) } if (f.attributes == null || f.attributes == "") { f.attributes = new GisAttributes(); f.attributes.id = g } if (f.attributes.id == undefined || f.attributes.id == "") { f.attributes.id = g } f.attributes._id = g; if (f.attributes != undefined) { f.attributes._type = "layer"; d.attributes = f.attributes } if (htObject.contains(g) == false) { htObject.add(g, d) } else { return g } d.displayInLayerSwitcher = false; _map.addLayer(d); return g
    }; this.GetLayersByName = function (d) { return _map.getLayersByName(d) }; this.RemoveLayer = function (f) { var e = _map.getLayersByName(f); for (var d = 0; d < e.length; d++) { this._map.removeLayer(e[d], true) } }; this.SetLayerActivate = function (d) { this.selectFeatureControl.setLayer(this.GetLayersByName(d)[0]); this.selectFeatureControl.activate() }; this.SetLayerDeactivate = function (d) { this.selectFeatureControl.setLayer(this.GetLayersByName(d)[0]); this.selectFeatureControl.deactivate() }; this.AddPoint = function (k, j, i, h) {
        var e = "point_" + GetRandomNum(); var d = GetGeometyPoint(j, i); if (h.attributes == null || h.attributes == "") {
            h.attributes = new GisAttributes();
            h.attributes.id = e
        } if (h.attributes.id == undefined || h.attributes.id == "") { h.attributes.id = e } h.attributes._id = e; if (h.style == null || h.style == "") { h.style = new GisObjectStyle(id, h.label); h.style.id = e } var g = new OpenLayers.Feature.Vector(d, h.style); g.id = e; if (h.attributes != undefined) { h.attributes._type = "point"; g.attributes = h.attributes } if (h.style != undefined) { g.style = h.style } if (h.label != null && h.label != undefined) { h.style.label = h.label } var f = this.GetLayersByName(k)[0]; f.addFeatures([g]); if (htObject.contains(e) == false) { htObject.add(e, g) } return e
    }; this.AddLine = function (f, l, e) {
        var k = "line_" + GetRandomNum(); if (e.isdisplaypoint == null) { e.isdisplaypoint = false } var m = []; if (l[0][0] > 0 && l[0][0] < 180 && l[0][1] > 0 && l[0][1] < 90) { for (var h = 0; h < l.length; h++) { m.push(this.GetGeometyPoint(l[h][0], l[h][1])) } } else { m = l } if (e.attributes == null || e.attributes == "") { e.attributes = new GisAttributes(); e.attributes.id = k } if (e.attributes.id == undefined || e.attributes.id == "") { e.attributes.id = k } e.attributes._id = k; if (e.style == null || e.style == "") {
            var j = new GisObjectStyle(k, "");
            j.strokeDashstyle = "solid"; j.id = k; e.style = j
        } var o = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.LineString(m), e.attributes); if (e.attributes != undefined) { e.attributes._type = "line"; o.attributes = e.attributes } if (e.style != undefined) { o.style = e.style } if (e.label != null && e.label != undefined) { e.style.label = e.label } this.GetLayersByName(f)[0].addFeatures([o]); if (htObject.contains(k) == false) { htObject.add(k, o) } if (e.isdisplaypoint == false) { return k } for (var h = 0; h < m.length; h++) { var n = e.pointattrslist == undefined ? null : e.pointattrslist[h]; var g = GetPoint(m[h], e.pointstylelist[h], n); var d = htObject.items(g); if (d == undefined) { return } this.GetLayersByName(f)[0].addFeatures([d]) } return k
    }; this.AddPolygon = function (h, m, f) {
        var g = "polygon_" + GetRandomNum(); var n = []; if (m[0][0] > 0 && m[0][0] < 180 && m[0][1] > 0 && m[0][1] < 90) { for (var l = 0; l < m.length; l++) { n.push(this.GetGeometyPoint(m[l][0], m[l][1])) } } else { n = m } if (f.attributes == null || f.attributes == "") { f.attributes = new GisAttributes(); f.attributes.id = g } if (f.attributes.id == undefined || f.attributes.id == "") {
            f.attributes.id = g
        } f.attributes._id = g; if (f.style == null || f.style == "") { var j = new GisObjectStyle(g, ""); j.strokeDashstyle = "solid"; j.id = g; f.style = j } var d = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.LinearRing(n)); if (f.attributes != undefined) { f.attributes._type = "polygon"; d.attributes = f.attributes } if (f.style != undefined) { d.style = f.style } if (f.label != null && f.label != undefined) { f.style.label = f.label } this.GetLayersByName(h)[0].addFeatures([d]); if (htObject.contains(g) == false) { htObject.add(g, d) } if (f.isdisplaypoint == undefined || f.isdisplaypoint == false) { return g } for (var l = 0; l < n.length; l++) { var o = f.pointattrslist == undefined ? null : f.pointattrslist[l]; var k = GetPoint(n[l], f.pointstylelist[l], o); var e = htObject.items(k); if (e == undefined) { return } this.GetLayersByName(h)[0].addFeatures([e]) } return g
    }; this.GetObject = function (e) { var d = htObject.items(e); if (d == undefined) { return } return d }; this.GetObjectByAttrId = function (e) {
        for (var d in htObject._hash) {
            var f = htObject._hash[d]; if (f.attributes == undefined) { continue } if (f.attributes.id != e) {
                continue
            } return f
        } return null
    }; this.GetObjectByType = function (f) { var e = []; for (var d in htObject._hash) { var g = htObject._hash[d]; if (g.attributes == undefined) { continue } if (g.attributes._type != f) { continue } e.push(g) } return e }; this.SetObjectDisplay = function (f, e) { var d = htObject.items(f); if (d == undefined) { return } if (typeof (e) != "boolean") { return } if (d.CLASS_NAME == "OpenLayers.Feature.Vector") { d.style.display = e ? "block" : "none"; d.layer.redraw() } else { d.display(e) } }; this.MoveTo = function (l, k, j, g) {
        var f = htObject.items(l); if (f == undefined) { return } if (typeof (k) != "number" || typeof (j) != "number") { return } var h = this.GetDisplayLonlat(k, j); if (g) { this.SetCenter(k, j) } if (f.attributes != null && f.attributes.lon != null) { f.attributes.lon = k; f.attributes.lat = j } if (f.CLASS_NAME == "OpenLayers.Feature.Vector") { f.move(h); return } f.lonlat = h; if (f.events != undefined && f.events.listeners.click != undefined) { var e = f.events.listeners.click[0]; if (e != undefined) { e.obj.lonlat = this.GetDisplayLonlat(k, j) } } for (var d = 0; d < _map.popups.length; d++) {
            if (_map.popups[d].id == l) {
                _map.popups[d].lonlat = this.GetDisplayLonlat(k, j);
                break
            }
        } markersLayer.redraw(); return f
    }; this.IsExistsClusterspoint = function (d) { var f = false; for (var e = 0; e < gis.clusterspoint.length; e++) { if (gis.clusterspoint[e].attributes._id == d.attributes._id) { f = true; break } } return f }; this.SetObjInfo = function (f, e) { var d = htObject.items(f); if (d == undefined) { return } if (e.attributes != undefined) { d.attributes = e.attributes } if (e.style != undefined) { d.style = e.style } return d }; this.RemoveObj = function (f) { var e = htObject.items(f); if (e == undefined) { return } for (var d = 0; d < _map.popups.length; d++) { if (_map.popups[d].id == f) { _map.removePopup(_map.popups[d]); break } } if (e.CLASS_NAME == "OpenLayers.Feature.Vector") { e.destroy() } else { if (e.CLASS_NAME == "OpenLayers.Marker") { markersLayer.removeMarker(marker) } } htObject.remove(f) }; this.SetMessage = function (e, d) { return this.AddOjbContentMenu(e, d, null, false, false) }; this.SetMessageDisplay = function (h, g) {
        var d = htObject.items(h); if (d == undefined) { return } for (var f = 0; f < _map.popups.length; f++) {
            var e = _map.popups[f]; if (e.id == h) {
                if (g) { e.show() } else { e.hide() } break
            }
        }
    }; this.AddMenuItem = function (h, f, g) { var d = GetObject(h); var e = new function () { this.value = f; this.func = function () { g(d.attributes) } }; return AddMenuItem(h, e, false) }; this.SetSelectMode = function (f, e, i) {
        var h = this.GetLayersByName("_controllayer"); if (!h[0]) { layer = new OpenLayers.Layer.Vector("_controllayer"); _map.addLayer(layer) } var g = null; var d = false; switch (f) {
            case 1: g = new OpenLayers.Control.DrawFeature(layer, OpenLayers.Handler.RegularPolygon, { featureAdded: function (j) { d = e(j, j.geometry.toString().replace("POLYGON((", "").replace("))", ""), GetLonlatByDisplayLonlat(j.geometry.bounds.left, j.geometry.bounds.bottom), GetLonlatByDisplayLonlat(j.geometry.bounds.right, j.geometry.bounds.top)); if (d) { j.destroy() } else { _htfeatures.add("slt_rpr_" + GetRandomNum(), j) } if (i == undefined) { g.deactivate(); _map.removeControl(g) } }, handlerOptions: { sides: 4, irregular: true } }); break; case 2: g = new OpenLayers.Control.DrawFeature(layer, OpenLayers.Handler.RegularPolygon, {
                featureAdded: function (j) {
                    d = e(j, j.geometry.toString().replace("POLYGON((", "").replace("))", ""), GetLonlatByDisplayLonlat(j.geometry.bounds.left, j.geometry.bounds.bottom), GetLonlatByDisplayLonlat(j.geometry.bounds.right, j.geometry.bounds.top));
                    if (d) { j.destroy() } else { _htfeatures.add("slt_rpc_" + GetRandomNum(), j) } if (i == undefined) { g.deactivate(); _map.removeControl(g) }
                }, handlerOptions: { sides: 40, irregular: true }
            }); break; case 3: g = new OpenLayers.Control.DrawFeature(layer, OpenLayers.Handler.Polygon, { featureAdded: function (j) { d = e(j, j.geometry.toString().replace("POLYGON((", "").replace("))", ""), GetLonlatByDisplayLonlat(j.geometry.bounds.left, j.geometry.bounds.bottom), GetLonlatByDisplayLonlat(j.geometry.bounds.right, j.geometry.bounds.top)); if (d) { j.destroy() } else { _htfeatures.add("slt_rp_" + GetRandomNum(), j) } if (i == undefined) { g.deactivate(); _map.removeControl(g) } } }); break; case 4: g = new OpenLayers.Control.DrawFeature(layer, OpenLayers.Handler.Point, {
                featureAdded: function (j) {
                    d = e(j, j.geometry.toString().replace("POINT(", "").replace(")", ""), GetLonlatByDisplayLonlat(j.geometry.bounds.left, j.geometry.bounds.bottom), GetLonlatByDisplayLonlat(j.geometry.bounds.right, j.geometry.bounds.top)); if (d) { j.destroy() } else {
                        _htfeatures.add("slt_p_" + GetRandomNum(), j)
                    } if (i == undefined) { g.deactivate(); _map.removeControl(g) }
                }
            }); break; case 5: break; case 6: break; default: break
        } g.id = _map.addControl(g); g.activate(); return g
    }; this.PolygonClear = function () { for (var d in _htfeatures._hash) { _htfeatures._hash[d].destroy() } for (var e = _map.controls.length - 1; e < _map.controls.length && e >= 0; e--) { if (_map.controls[e].CLASS_NAME == "OpenLayers.Control.Measure" || _map.controls[e].CLASS_NAME == "OpenLayers.Control.DrawFeature") { _map.removeControl(_map.controls[e]) } } var f = this.GetLayersByName("_controllayer"); if (f[0]) { this._map.removeLayer(f[0], true) } _htfeatures.clear() }; this.AddtoCluster = function (f, e) { var d = htObject.items(f); if (d == undefined) { return } if (d.CLASS_NAME != "OpenLayers.Feature.Vector") { return } this.clusterspoint.push(d); if (e) { this.StrategyCluster() } }; this.StrategyCluster = function () {
        if (!this.clusters) {
            this._strategy = new OpenLayers.Strategy.Cluster(); this.clusters = new OpenLayers.Layer.Vector("Clusters", {
                strategies: [this._strategy], styleMap: new OpenLayers.StyleMap(new OpenLayers.Style({ fontSize: "${fontSize}", labelAlign: "cm", fontColor: "${fontColor}" }, {
                    rules: [new OpenLayers.Rule({ filter: new OpenLayers.Filter.Comparison({ type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "count", value: 1 }), symbolizer: { label: "${label}", graphicWidth: "${graphicWidth}", labelXOffset: 0, labelYOffset: -20, title: "${title}", externalGraphic: "${img1}" } }), new OpenLayers.Rule({ elseFilter: true, symbolizer: { externalGraphic: "${imgs}", graphicWidth: "${graphicWidths}", pointRadius: "${radius}", fillColor: "#ffcc66", strokeColor: "${strokeColor}", strokeWidth: "${strokeWidth}", title: "对象数：${count}", labelXOffset: 0, labelYOffset: -20, strokeOpacity: 1 } })], context: {
                        id: function (f) {
                            return f.cluster[0].data.id
                        }, type: function (f) { return f.cluster[0].data.type }, key: function (f) { return f.cluster[0].data.key }, strokeWidth: function (f) { return (f.cluster) ? 2 : 1 }, radius: function (g) { var f = 2; if (g.cluster) { f = Math.min(g.attributes.count, 7) + 2 } return f }, count: function (f) { return f.attributes.count }, label: function (f) { return f.cluster[0].data.label }, title: function (f) { return f.cluster[0].data.title }, img1: function (f) { return f.cluster[0].data.img1 }, imgs: function (f) { if (typeof (f.cluster[0].data.imgsExFun) == "function") { return f.cluster[0].data.imgsExFun(f) } return f.cluster[0].data.imgs }, fontSize: function (f) { return f.cluster[0].data.fontSize }, fontColor: function (f) { return f.cluster[0].data.fontColor }, strokeColor: function (f) { return f.cluster[0].data.strokeColor }, graphicWidth: function (f) { return f.cluster[0].data.graphicWidth }, graphicWidths: function (f) { return (f.cluster[0].data.graphicWidths) ? (f.cluster[0].data.graphicWidths) : f.cluster[0].data.graphicWidth * 1.5 }
                    }
                }))
            }); this.clusters.displayInLayerSwitcher = false; _map.addLayer(this.clusters);
            this.clusters.events.register("click", this, function (o) {
                var l; var f = ""; var h = new Hashtable(); var p = null; for (var k = 0; k < this.clusters.features.length; k++) {
                    if (this.clusters.features[k].geometry.id == o.srcElement.id) {
                        if (this.clusters.features[k].cluster.length > 1) {
                            p = this.clusters.features[k]; var m = "clusters_" + GetRandomNum(); var n = "<div style='height:20px;font-family:宋体;font-size:10pt;text-align:center;border-bottom: solid 1px #99ccff;'>列表</div>"; for (var g = 0; g < this.clusters.features[k].cluster.length; g++) {
                                n += "<div style='height:auto;width:150px;text-align:left;border-bottom: solid 1px #999999;font-size:9pt;'>"; if (this.clusters.features[k].cluster[g].attributes._html == undefined) { n += "<label style='height:15px;font-family:宋体;'>" + this.clusters.features[k].cluster[g].attributes.value.trim() + "</label>"; n += "</div>"; continue } n += "<a id='" + m + "style='font-family:宋体;font-size:9pt;cursor:hand' href='javascript:void(0);'onclick=MenuCallback_Clusters('" + this.clusters.features[k].cluster[g].attributes._id + "','" + m + "')>" + this.clusters.features[k].cluster[g].attributes.value + "</a>";
                                n += "</div>"
                            } p.attributes._id = m; p.attributes._html = n; if (htObject.contains(m) == false) { htObject.add(m, p) } AddOjbContentMenu(m, n, null, true, false); break
                        } for (var g = 0; g < this.clusters.features[k].cluster.length; g++) { this.clusters.features[k].cluster[g].attributes.func(this.clusters.features[k].cluster[g].attributes._id) } break
                    }
                } if (p == null) { return }
            })
        } this._strategy.distance = this._distance; this._strategy.threshold = 1; this.clusters.removeAllFeatures(); for (var e = 0; e < this.clusterspoint.length; e++) { var d = this.clusterspoint[e].layer; if (d == undefined) { continue } if (d.name != "Clusters") { d.removeFeatures([this.htObject.items(this.clusterspoint[e].attributes._id)]) } } this.clusters.addFeatures(this.clusterspoint)
    }; this.AddtoCluster2 = function (e) { var d = htObject.items(e); if (d == undefined) { return } if (d.CLASS_NAME != "OpenLayers.Feature.Vector") { return } this.points.push(d) }; this.StrategyCluster2 = function (f, h, d) {
        var g, e; if (d == undefined || d == "") { d = this._distance } if (f == undefined || f == "") {
            f = "Clusters" + GetRandomNum(); e = new OpenLayers.Strategy.Cluster();
            g = new OpenLayers.Layer.Vector(f, {
                strategies: [e], styleMap: new OpenLayers.StyleMap(new OpenLayers.Style({ fontSize: "${fontSize}", labelAlign: "cm", fontColor: "${fontColor}" }, {
                    rules: [new OpenLayers.Rule({ filter: new OpenLayers.Filter.Comparison({ type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "count", value: 1 }), symbolizer: { label: "${label}", graphicWidth: "${graphicWidth}", labelXOffset: 0, labelYOffset: -20, title: "${title}", externalGraphic: "${img1}" } }), new OpenLayers.Rule({ elseFilter: true, symbolizer: { externalGraphic: "${imgs}", graphicWidth: "${graphicWidths}", pointRadius: "${radius}", fillColor: "#ffcc66", strokeColor: "${strokeColor}", strokeWidth: "${strokeWidth}", title: "对象数：${count}", labelXOffset: 0, labelYOffset: -20, strokeOpacity: 1 } })], context: {
                        id: function (i) { return i.cluster[0].data.id }, type: function (i) { return i.cluster[0].data.type }, key: function (i) { return i.cluster[0].data.key }, strokeWidth: function (i) { return (i.cluster) ? 2 : 1 }, radius: function (j) {
                            var i = 2; if (j.cluster) { i = Math.min(j.attributes.count, 7) + 2 } return i
                        }, count: function (i) { return i.attributes.count }, label: function (i) { return i.cluster[0].data.label }, title: function (i) { return i.cluster[0].data.title }, img1: function (i) { return i.cluster[0].data.img1 }, imgs: function (i) { if (typeof (i.cluster[0].data.imgsExFun) == "function") { return i.cluster[0].data.imgsExFun() } return i.cluster[0].data.imgs }, fontSize: function (i) { return i.cluster[0].data.fontSize }, fontColor: function (i) { return i.cluster[0].data.fontColor }, strokeColor: function (i) { return i.cluster[0].data.strokeColor }, graphicWidth: function (i) { return i.cluster[0].data.graphicWidth }, graphicWidths: function (i) { return (i.cluster[0].data.graphicWidths) ? (i.cluster[0].data.graphicWidths) : i.cluster[0].data.graphicWidth * 1.5 }
                    }
                }))
            }); _map.addLayer(g); g.events.register("click", g, function (r) {
                var o; var k = ""; var m = new Hashtable(); var s = null; for (var n = 0; n < g.features.length; n++) {
                    if (g.features[n].geometry.id == r.srcElement.id) {
                        if (g.features[n].cluster.length > 1) {
                            s = g.features[n]; var p = "clusters2_" + GetRandomNum(); var q = "<div style='height:20px;font-family:宋体;font-size:10pt;text-align:center;border-bottom: solid 1px #99ccff;'>列表</div>";
                            for (var l = 0; l < g.features[n].cluster.length; l++) { q += "<div style='height:auto;width:150px;text-align:left;border-bottom: solid 1px #999999;font-size:9pt;'>"; if (g.features[n].cluster[l].attributes._html == undefined) { q += "<label style='height:15px;font-family:宋体;'>" + g.features[n].cluster[l].attributes.value.trim() + "</label>"; q += "</div>"; continue } q += "<a id='" + p + "style='font-family:宋体;font-size:9pt;cursor:hand' href='javascript:void(0);'onclick=MenuCallback_Clusters('" + g.features[n].cluster[l].attributes._id + "','" + p + "')>" + g.features[n].cluster[l].attributes.value + "</a>"; q += "</div>" } s.attributes._id = p; s.attributes._html = q; if (htObject.contains(p) == false) { htObject.add(p, s) } AddOjbContentMenu(p, q, null, true, false); break
                        } for (var l = 0; l < g.features[n].cluster.length; l++) { g.features[n].cluster[l].attributes.func(g.features[n].cluster[l].attributes._id) } break
                    }
                } if (s == null) { return }
            })
        } else { g = this.GetLayersByName(f)[0]; e = g.strategies } e.distance = d; e.threshold = 1; g.removeAllFeatures(); g.addFeatures(h); return f
    }; this.CreateMeasurControls = function (i, h, d) {
        var f = OpenLayers.Layer.Vector.prototype.renderers;
        this._measureControls = { line: new OpenLayers.Control.Measure(OpenLayers.Handler.Path, { persist: true, handlerOptions: { layerOptions: { renderers: f, styleMap: this._styleMap } } }), polygon: new OpenLayers.Control.Measure(OpenLayers.Handler.Polygon, { persist: true, handlerOptions: { layerOptions: { renderers: f, styleMap: new OpenLayers.StyleMap({ "default": { strokeColor: "red", strokeOpacity: 1, strokeWidth: "1", strokeDashstyle: "dashdot", fillColor: "red", fillOpacity: 0.3 } }) } } }) }; var g; for (var e in this._measureControls) {
            g = this._measureControls[e]; g.events.on({
                "measure": function (l) {
                    var r = l.geometry; var n = l.units == "km" ? "公里" : l.units == "m" ? "米" : l.units; var k = l.order; var q = l.measure; var j = []; var o = new function () { this.isdisplaypoint = true; this.pointstylelist = []; this.pointattrslist = []; this.attributes = new GisAttributes(); this.style = new GisObjectStyle() }; o.style.strokeDashstyle = "solid"; o.style.fontColor = "blue"; o.attributes.type = "measure_line_obj"; if (k == 1) {
                        for (var p = 0; p < r.components.length; p++) {
                            o.pointattrslist[p] = new GisAttributes();
                            o.pointattrslist[p].type = "measure_line_obj"; o.pointstylelist[p] = new GisObjectStyle(); o.pointstylelist[p].label = (p == r.components.length - 1) ? q.toFixed(3) + "" + n : ""; o.pointstylelist[p].strokeColor = (p == 0 ? "#00FF00" : p == r.components.length - 1 ? "#FF0000" : "#0000FF"); o.pointstylelist[p].fontColor = "blue"; o.pointstylelist[p].pointRadius = 2; j.push(GetGeometyPointBydisplaylonlat(r.components[p].x, r.components[p].y))
                        } AddLine(i, j, o)
                    } else { for (var p = 0; p < r.components[0].components.length; p++) { o.pointattrslist[p] = new GisAttributes(); o.pointattrslist[p].type = "measure_line_obj"; o.pointstylelist[p] = new GisObjectStyle(); o.pointstylelist[p].label = (p == r.components[0].components.length - 2 ? q.toFixed(3) + "平方" + n : ""); o.pointstylelist[p].fontColor = "blue"; o.pointstylelist[p].pointRadius = 2; j.push(GetGeometyPointBydisplaylonlat(r.components[0].components[p].x, r.components[0].components[p].y)) } AddPolygon(i, j, o) } h(q.toFixed(3), l)
                }, "measurepartial": function (j) { var k = j.measure; d(k.toFixed(3), j) }
            }); _map.addControl(g)
        } return this._measureControls
    }; this.ToggleControl = function (d) { for (key in this._measureControls) { var e = this._measureControls[key]; if (d == key) { e.activate(); e.geodesic = true; e.setImmediate(true) } else { e.deactivate() } } }; this.ClearMeasureObj = function () { for (var d in htObject._hash) { var e = htObject._hash[d]; if (e.attributes == undefined) { continue } if (e.attributes.type != "measure_line_obj") { continue } e.destroy(); htObject.remove(d) } }; this.GisAttributes = function () { this.id = null; this.type = null; this.code = null; this.msg = null; this.xml = null; this.name = null; this.value = null; this.obj = null; this.obj1 = null }; this.GisObjectStyle = function (e, d) {
        this.id = (e == null) ? "" : e; this.label = (d == null) ? "" : d; this.title = ""; this.externalGraphic = null; this.graphicWidth = 24; this.graphicWidths = 32; this.graphicXOffset = -1 * this.graphicWidth / 2; this.graphicYOffset = -1 * this.graphicWidth / 2; this.img1 = "OpenLayers/img/marker.png"; this.imgs = "OpenLayers/img/marker.png"; this.imgsExFun = null; this.fontColor = "#000000"; this.fontSize = "9pt"; this.fontFamily = "Courier New, monospace"; this.labelXOffset = 0;
        this.labelYOffset = this.graphicYOffset - 10; this.cursor = "inherit"; this.fillColor = "#ee9900"; this.fillOpacity = 0.6; this.strokeColor = "#ee9900"; this.strokeWidth = 2; this.strokeOpacity = 1; this.strokeDashstyle = "solid"; this.strokeLinecap = "round"; this.hoverFillColor = "white"; this.hoverFillOpacity = 0.8; this.hoverPointRadius = 1; this.hoverPointUnit = "%"; this.hoverStrokeColor = "red"; this.hoverStrokeOpacity = 1; this.hoverStrokeWidth = 0.2; this.labelAlign = "cm"; this.labelOutlineColor = "white"; this.labelOutlineWidth = 3; this.pointerEvents = "visiblePainted"; this.pointRadius = 3; return { id: this.id, title: this.title, label: this.label, externalGraphic: this.externalGraphic, graphicWidth: this.graphicWidth, graphicWidths: this.graphicWidths, graphicXOffset: this.graphicXOffset, graphicYOffset: this.graphicYOffset, img1: this.img1, imgs: this.imgs, fontcolor: this.fontcolor, labelXOffset: this.labelXOffset, labelYOffset: this.labelYOffset, cursor: this.cursor, fillColor: this.fillColor, fillOpacity: this.fillOpacity, fontColor: this.fontColor, fontSize: this.fontSize, fontFamily: this.fontFamily, hoverFillColor: this.hoverFillColor, hoverFillOpacity: this.hoverFillOpacity, hoverPointRadius: this.hoverPointRadius, hoverPointUnit: this.hoverPointUnit, hoverStrokeColor: this.hoverStrokeColor, hoverStrokeOpacity: this.hoverStrokeOpacity, hoverStrokeWidth: this.hoverStrokeWidth, labelAlign: this.labelAlign, labelOutlineColor: this.labelOutlineColor, labelOutlineWidth: this.labelOutlineWidth, pointerEvents: this.pointerEvents, pointRadius: this.pointRadius, strokeColor: this.strokeColor, strokeDashstyle: this.strokeDashstyle, strokeLinecap: this.strokeLinecap, strokeOpacity: this.strokeOpacity, strokeWidth: this.strokeWidth }
    }; this.RegisterMoveend = function (e, d) { _map.events.register("moveend", e, d) }; this.UnRegisterMoveend = function (e, d) { _map.events.unregister("moveend", e, d) }; function a(o, l, d, e, n) {
        if (_mapSource == 2) { OpenLayers.Projection.transforms["EPSG:900913"]["EPSG:4326"] = function (m) { m.x = 180 * m.x / 20037708.34; m.y = 180 / Math.PI * (2 * Math.atan(Math.exp((m.y / 19915990) * Math.PI)) - Math.PI / 2); return m }; OpenLayers.Projection.transforms["EPSG:4326"]["EPSG:900913"] = function (m) { m.x = m.x * 20037708.34 / 180; m.y = Math.log(Math.tan((90 + m.y) * Math.PI / 360)) / Math.PI * 19915990; return m } } var j = { numZoomLevels: this._numZoomLevels, projection: "EPSG:900913", displayProjection: "EPSG:4326", isBaseLayer: true, sateTiles: false }; if (o != null && o != "") { j = o } var h = d[0].trim().length == 0; if (_mapSource == 1) {
            this._maptilesvLayer = new OpenLayers.Layer.QQ("地图", this._qqmapTiles, { numZoomLevels: 19, isBaseLayer: true, sateTiles: false, online: h, imgdirname: "mapTiles" }); this._sateTilesLayer = new OpenLayers.Layer.QQ("卫星", this._qqsateTiles, { numZoomLevels: 18, isBaseLayer: true, sateTiles: true, online: h, imgdirname: "sateTiles" });
            this._demTilesLayer = new OpenLayers.Layer.QQ("地形", this._qqdemTiles, { numZoomLevels: 15, isBaseLayer: true, sateTiles: true, online: h, imgdirname: "demTiles" }); this._sateTranTilesLayer = new OpenLayers.Layer.QQ("卫星路网", this._qqsateTranTiles, { numZoomLevels: 18, visibility: false, sateTiles: false, isBaseLayer: false, online: h, imgdirname: "sateTranTiles" })
        } else {
            if (_mapSource == 2) {
                this._maptilesvLayer = new OpenLayers.Layer.Baidu("地图", this._bdmapTiles, { numZoomLevels: 19, isBaseLayer: true, sateTiles: true, imgdirname: "maptiles", online: h, tileOrigin: new OpenLayers.LonLat(-10, 910), maxExtent: new OpenLayers.Bounds(-33554432, -33554432, 33554432, 33554432) }); this._sateTilesLayer = new OpenLayers.Layer.Baidu("卫星", this._bdsateTiles, { numZoomLevels: 15, isBaseLayer: true, sateTiles: true, imgdirname: "sateTiles", online: h, tileOrigin: new OpenLayers.LonLat(-10, 910), maxExtent: new OpenLayers.Bounds(-33554432, -33554432, 33554432, 33554432) }); this._sateTranTilesLayer = new OpenLayers.Layer.Baidu("卫星路网", this._bdsateTranTiles, { numZoomLevels: 19, visibility: false, sateTiles: false, isBaseLayer: false, online: h, imgdirname: "sateTranTiles", tileOrigin: new OpenLayers.LonLat(-10, 910), maxExtent: new OpenLayers.Bounds(-33554432, -33554432, 33554432, 33554432) })
            } else {
                if (_mapSource == 3) { this._maptilesvLayer = new OpenLayers.Layer.GaoDe("地图", this._gdmapTiles, { numZoomLevels: 19, isBaseLayer: true, sateTiles: true, imgdirname: "maptiles", imgtype: 8, online: h, units: "m" }); this._sateTilesLayer = new OpenLayers.Layer.GaoDe("卫星", this._gdsateTiles, { numZoomLevels: 15, isBaseLayer: true, sateTiles: true, imgdirname: "sateTiles", imgtype: 6, online: h, units: "m" }); this._sateTranTilesLayer = new OpenLayers.Layer.GaoDe("卫星路网", this._gdsateTranTiles, { numZoomLevels: 19, visibility: false, sateTiles: false, isBaseLayer: false, imgdirname: "sateTranTiles", imgtype: 8, online: h, units: "m" }) } else {
                    this._maptilesvLayer = new OpenLayers.Layer.QQMap("地图", this._sosomapTiles, { numZoomLevels: 18, isBaseLayer: true, sateTiles: false, online: h, imgdirname: "maptiles" }); this._sateTilesLayer = new OpenLayers.Layer.QQMap("卫星", this._sososateTiles, { numZoomLevels: 15, isBaseLayer: true, sateTiles: true, online: h, imgdirname: "sateTiles" }); this._sateTranTilesLayer = new OpenLayers.Layer.QQMap("卫星路网", this._sososateTranTiles, { numZoomLevels: 18, visibility: false, sateTiles: false, isBaseLayer: false, online: h, imgdirname: "sateTranTiles" })
                }
            }
        } var i = []; switch (n) { case 1: i = [this._sateTilesLayer, this._maptilesvLayer, this._sateTranTilesLayer]; this._sateTranTilesLayer.visibility = false; break; case 2: i = [this._sateTilesLayer, this._maptilesvLayer, this._sateTranTilesLayer]; this._sateTranTilesLayer.visibility = true; break; default: i = [this._maptilesvLayer, this._sateTilesLayer, this._sateTranTilesLayer]; break } _map = new OpenLayers.Map({ projection: "EPSG:900913", displayProjection: "EPSG:4326", div: c, layers: i, center: [0, 0], zoom: l }); markersLayer = new OpenLayers.Layer.Markers("兴趣标记", { visibility: false }); selectFeatureControl = new OpenLayers.Control.SelectFeature([markersLayer], { onBeforeSelect: function (m) { if (typeof (m.attributes.beforeselectfunc) == "function") { m.attributes.beforeselectfunc(m.attributes._id, m) } }, onSelect: function (m) { if (typeof (m.attributes.selectfunc) == "function") { m.attributes.selectfunc(m.attributes._id, m) } }, onUnselect: function (m) { if (typeof (m.attributes.unselectfunc) == "function") { m.attributes.unselectfunc(m.attributes._id, m) } }, multipleSelect: function () { }, hover: false, multiple: false, multipleKey: "altKey" });
        selectFeatureControl.multiple = false; selectFeatureControl.multipleKey = "altKey"; _map.addControl(selectFeatureControl); var g = this._map.getControlsByClass("OpenLayers.Control.Zoom")[0]; _map.removeControl(g); _strategy = new OpenLayers.Strategy.Cluster(); _map.addControl(new OpenLayers.Control.PanZoomBar({ position: new OpenLayers.Pixel(2, 5) })); _map.addControl(new OpenLayers.Control.Navigation()); this.switcherLayer = new OpenLayers.Control.LayerSwitcher(); _map.addControl(switcherLayer); this.switcherLayer.dataLbl.innerHTML = "叠加图层"; this.switcherLayer.baseLbl.innerHTML = "地图类型"; if (this._divID) { var f = new OpenLayers.Control.MousePosition({ element: document.getElementById(this._divID) }); _map.addControl(f) } OpenLayers.INCHES_PER_UNIT["千米"] = OpenLayers.INCHES_PER_UNIT["km"]; OpenLayers.INCHES_PER_UNIT["米"] = OpenLayers.INCHES_PER_UNIT["m"]; OpenLayers.INCHES_PER_UNIT["英里"] = OpenLayers.INCHES_PER_UNIT["mi"]; OpenLayers.INCHES_PER_UNIT["英尺"] = OpenLayers.INCHES_PER_UNIT["ft"]; _map.addControl(new OpenLayers.Control.ScaleLine({ topOutUnits: "千米", topInUnits: "米", bottomOutUnits: "英里", bottomInUnits: "英尺" }));
        if (e != undefined && e == true) { _map.addControl(new OpenLayers.Control.LTOverviewMap()) } var k = { "Point": { pointRadius: 2, graphicName: "square", fillColor: "white", fillOpacity: 1, strokeWidth: 1, strokeOpacity: 1, strokeColor: "#333333" }, "Line": { strokeWidth: 1, strokeOpacity: 1, strokeColor: "#666666", strokeDashstyle: "dash" }, "Polygon": { strokeWidth: 2, strokeOpacity: 1, strokeColor: "#666666", fillColor: "white", fillOpacity: 0.3 } }
    } this.GetCenter = function () { return _map.getCenter().transform("EPSG:900913", "EPSG:4326") }; this.GetDisplayLonlat = function (f, e) { var d = new OpenLayers.LonLat(f, e); d.transform("EPSG:4326", "EPSG:900913"); return d }; this.GetLonlatByDisplayLonlat = function (f, e) { var d = new OpenLayers.LonLat(f, e); d.transform("EPSG:900913", "EPSG:4326"); return d }; this.GetIcon = function (h, f, d) { var e = new OpenLayers.Size(f == null ? 21 : f, d == null ? 25 : d); var g = new OpenLayers.Pixel(-(e.w / 2), -e.h); return new OpenLayers.Icon((h == null ? "../OpenLayers/img/marker.png" : h), e, g) }; this.GetGeometyPoint = function (f, e) {
        var d = GetDisplayLonlat(f, e); return new OpenLayers.Geometry.Point(d.lon, d.lat)
    }; this.GetGeometyPointBydisplaylonlat = function (e, d) { return new OpenLayers.Geometry.Point(e, d) }; this.GetPoint = function (d, h, e) { var g = "point_" + GetRandomNum(); var f = new OpenLayers.Feature.Vector(d, h); if (e == null || e == "") { e = new GisAttributes(); e.id = g } if (e.id == undefined || e.id == "") { e.id = g } e._id = g; if (h == null || h == "") { h = new GisObjectStyle("", ""); h.id = g } if (h != undefined) { f.style = h } if (e != undefined) { e._type = "point"; f.attributes = e } if (htObject.contains(g) == false) { htObject.add(g, f) } return g }; this.AddButton = function (d, h, g, f) { var e = document.createElement("BUTTON"); e.value = g; e.id = h; if (typeof (f) == "function") { e.onclick = function () { return f(this) } } document.getElementById(d).appendChild(e); return e }; this.RemoveButton = function (d, e) { document.getElementById(d).removeChild(document.getElementById(e)) }; this.MenuCallback = function (f) { var e = GetObject(f); var d = htObjClickMenu.items(f); if (d == undefined) { return } d.func(e.attributes) }; this.AddMenuItem = function (f, e, d) { return this.AddOjbContentMenu(f, null, e, d, true) }; this.AddOjbContentMenu = function (d, i, h, f, k) {
        var l = htObject.items(d);
        if (l == undefined) { return } var e = document.getElementById("div_p_" + d); if (!e) { e = document.createElement("DIV"); e.id = "div_p_" + d } e.style.height = "100%"; var g = document.getElementById("div_ph_" + d); if (!g) { g = document.createElement("DIV"); g.style.fontSize = "9pt"; g.id = "div_ph_" + d; e.appendChild(g) } if (k == false) { g.innerHTML = "" } if (i != undefined) { g.innerHTML += i } var j = document.getElementById("div_pc_" + d); if (!j) { j = document.createElement("DIV"); j.id = "div_pc_" + d; e.appendChild(j) } if (h != undefined) { j.innerHTML += "<a id='" + d + "_" + h.id + "' class=" + h.cls + " style='font-family:宋体;font-size:9pt;cursor:hand' href='javascript:void(0);'onclick=MenuCallback('" + d + "')>" + h.value + "</a><br/>" } if (htObjClickMenu.contains(d) == false && h != undefined) { htObjClickMenu.add(d, h) } if (l.attributes._html == undefined) { l.attributes._html = e.outerHTML } this.AddPointMsg(d, e.outerHTML, f); return e.outerHTML
    }; this.AddMarker = function (e, j, f, g, h) {
        var k = "marker_" + GetRandomNum(); if (f.icon == null) { f.icon = this.GetIcon() } var i = new OpenLayers.Marker(this.GetDisplayLonlat(e, j));
        if (typeof (f.icon) == "string") { i.icon.url = f.icon } else { i.icon.url = f.icon.url; i.icon.size = f.icon.size } if (g != undefined && g != null && g == true) { var l = new OpenLayers.Feature(markersLayer, this.GetDisplayLonlat(e, j)); l.closeBox = f.closeBox == null ? true : f.closeBox; l.popupClass = OpenLayers.Popup.FramedCloud; l.data.popupContentHTML = h; l.data.overflow = (f.overflow == null ? true : f.overflow) ? "auto" : "hidden"; var d = function (m) { if (this.popup == null) { this.popup = this.createPopup(this.closeBox); this.popup.autoSize = true; this.popup.id = k; _map.addPopup(this.popup); this.popup.show() } else { this.popup.toggle() } OpenLayers.Event.stop(m) }; i.events.register("click", l, d) } else { if (typeof (g) == "function") { i.events.register("click", this, function (m) { g([markercall, BackInfo]) }) } } if (typeof (f.opacity) == "number") { i.setOpacity(f.opacity) } markersLayer.addMarker(i); if (htObject.contains(k) == false) { htObject.add(k, i) } return k
    }; this.SetMarkerInfo = function (j, g, h) {
        var d = htObject.items(j); if (d == undefined) { return } if (typeof (g.icon) == "string" || d.icon.url != g.icon) {
            d.setUrl(g.icon)
        } if (typeof (g.icon) == "number") { d.setOpacity(g.opacity) } if (h != null && h != "") { var f = d.events.listeners.click[0]; if (f != undefined) { f.obj.data.popupContentHTML = h } for (var e = 0; e < _map.popups.length; e++) { if (_map.popups[e].id == j) { _map.popups[e].setSize(new OpenLayers.Size(10000, 10000)); _map.popups[e].setContentHTML(h); break } } }
    }; this.AddPointMsg = function (k, h, f) { var d = htObject.items(k); if (d == undefined) { return } if (!d.popup) { for (var g = 0; g < _map.popups.length; g++) { var e = _map.popups[g]; if (e.id == k) { if (f) { e.show() } else { e.hide() } return } } var i = new OpenLayers.LonLat(d.geometry.getCentroid().x, d.geometry.getCentroid().y); var e = new OpenLayers.Popup.FramedCloud(k, i, new OpenLayers.Size(300, 300), h, null, true); e.maxSize = new OpenLayers.Size(500, 450); this._map.addPopup(e); d.popup = e; d.popup.updateSize(); if (f) { e.show() } else { e.hide() } } else { d.popup.setContentHTML(h); d.popup.updateSize(); d.popup.toggle(); if (f) { d.popup.show() } } }; this.SetMousePosition = function (d) {
        _map.addControl(new OpenLayers.Control.MousePosition({ element: document.getElementById(d) }))
    }; this.MenuCallback_Clusters = function (g, f) { var d = htObject.items(g); if (d == undefined) { return } var e = new function () { this.id = "c_all"; this.value = "返回列表"; this.func = function () { AddPointMsg(f, htObject.items(f).attributes._html, true) } }; AddOjbContentMenu(f, d.attributes._html + "<div style='border-bottom: solid 1px #999999'></div>", e, true, false) }; this.DisplayLayerFeature = function (g, e, f) { for (var d = 0; d < e.length; d++) { if (f) { e[d].style = null } else { e[d].style = { display: "none" } } } this.GetLayersByName(g)[0].redraw() }; function b(e) { var d = e * _map.getExtent().getHeight(); polygon.handler.setOptions({ radius: d, angle: 0 }) } return this
}; function Hashtable() {
    this._hash = new Object(); this.add = function (a, b) { if (typeof (a) != "undefined") { this._hash[a] = typeof (b) == "undefined" ? null : b } else { return false } }; this.remove = function (a) { delete this._hash[a] }; this.count = function () { var b = 0; for (var a in this._hash) { b++ } return b }; this.items = function (a) { return this._hash[a] }; this.contains = function (a) { return typeof (this._hash[a]) != "undefined" }; this.clear = function () {
        for (var a in this._hash) {
            delete this._hash[a]
        }
    }; this.toJson = function () { var b = ""; for (var a in this._hash) { b += ',"' + a + '":"' + this._hash[a].replace('"', "").replace("'", "").replace(":", "").replace(",", "") + '"' } if (b.length > 0) { b = b.substr(1, b.length) } return "{" + b + "}" }; this.toJson2 = function () { var b = ""; for (var a in this._hash) { if (typeof (this._hash[a]) != "number") { b += ',"' + a + '":"' + this._hash[a].replaceAll('"', '\\"') + '"' } else { b += ',"' + a + '":' + this._hash[a] } } if (b.length > 0) { b = b.substr(1, b.length) } return "{" + b + "}" }; this.toArrayKey = function () { var b = ""; for (var a in this._hash) { b += "," + a } if (b.length > 0) { b = b.substr(1, b.length) } return b }
} function GetRandomNum() { var a = Math.random(); return (100000 + Math.round(899999 * a)) };